{% extends 'base.html.twig' %}

{% block title %}Lista de Livros
{% endblock %}

{% block body %}
	<h1>üìö Gest√£o de Livros</h1>

	<!-- Formul√°rio para adicionar ou editar livros -->
	<form id="book-form">
		<input type="hidden" id="book-id">

		<label for="title">üìñ T√≠tulo:</label>
		<input type="text" id="title" placeholder="Digite o t√≠tulo" required>

		<label for="author">‚úçÔ∏è Autor:</label>
		<input type="text" id="author" placeholder="Digite o autor" required>

		<label for="description">üìù Descri√ß√£o:</label>
		<textarea id="description" placeholder="Digite a descri√ß√£o"></textarea>

		<label for="year">üìÖ Ano:</label>
		<input type="number" id="year" placeholder="Digite o ano" required>

		<button type="submit">Salvar Livro</button>
	</form>

	<!-- Tabela de livros -->
	<table>
		<thead>
			<tr>
				<th>ID</th>
				<th>T√≠tulo</th>
				<th>Autor</th>
				<th>Descri√ß√£o</th>
				<th>Ano</th>
				<th>A√ß√µes</th>
			</tr>
		</thead>
		<tbody
			id="book-list"><!-- Os livros ser√£o carregados aqui via JavaScript -->
		</tbody>
	</table>

	 <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
	 <script>
	        document.addEventListener("DOMContentLoaded", function () {
	            function loadBooks() {
	                fetch('/api/books')
	                    .then(response => response.json())
	                    .then(data => {
	                        const bookList = document.getElementById("book-list");
	                        bookList.innerHTML = "";
	
	                        data.forEach(book => {
	                            const row = document.createElement("tr");
	                            row.innerHTML = `
	                                <td>${book.id}</td>
	                                <td>${book.title}</td>
	                                <td>${book.author}</td>
	                                <td>${book.description || 'Sem descri√ß√£o'}</td>
	                                <td>${book.year}</td>
	                                <td>
	                                    <button class="edit-btn" data-id="${book.id}" data-title="${book.title}" data-author="${book.author}" data-description="${book.description}" data-year="${book.year}">‚úèÔ∏è Editar</button>
	                                    <button class="delete-btn" data-id="${book.id}">üóëÔ∏è Excluir</button>
	                                </td>
	                            `;
	                            bookList.appendChild(row);
	                        });
	
	                        // Adicionar eventos para bot√µes de editar e excluir
	                        document.querySelectorAll('.edit-btn').forEach(button => {
	                            button.addEventListener('click', function () {
	                                document.getElementById("book-id").value = this.dataset.id;
	                                document.getElementById("title").value = this.dataset.title;
	                                document.getElementById("author").value = this.dataset.author;
	                                document.getElementById("description").value = this.dataset.description;
	                                document.getElementById("year").value = this.dataset.year;
	                            });
	                        });
	
	                        document.querySelectorAll('.delete-btn').forEach(button => {
	                            button.addEventListener('click', function () {
	                                deleteBook(this.dataset.id);
	                            });
	                        });
	                    })
	                    .catch(error => console.error("Erro ao carregar livros:", error));
	            }
	
	            loadBooks();
	
	            document.getElementById("book-form").addEventListener("submit", function (event) {
	                event.preventDefault();
	
	                const bookId = document.getElementById("book-id").value;
	                const title = document.getElementById("title").value;
	                const author = document.getElementById("author").value;
	                const description = document.getElementById("description").value;
	                const year = document.getElementById("year").value;
	
	                const method = bookId ? "PUT" : "POST";
	                const url = bookId ? `/api/books/${bookId}` : "/api/books";
	
	                fetch(url, {
	                    method: method,
	                    headers: {
	                        "Content-Type": "application/json"
	                    },
	                    body: JSON.stringify({ title, author, description, year })
	                })
	                .then(response => {
	                    if (!response.ok) {
	                        throw new Error("Erro ao salvar livro");
	                    }
	                    return response.json();
	                })
	                .then(data => {
	                    Swal.fire({
	                        icon: "success",
	                        title: "Sucesso!",
	                        text: bookId ? "Livro atualizado com sucesso!" : "Livro adicionado com sucesso!",
	                    });
	                    loadBooks();
	                    document.getElementById("book-form").reset();
	                    document.getElementById("book-id").value = "";
	                })
	                .catch(error => {
	                    Swal.fire({
	                        icon: "error",
	                        title: "Erro!",
	                        text: "N√£o foi poss√≠vel salvar o livro.",
	                    });
	                });
	            });
	
	            function deleteBook(bookId) {
	                Swal.fire({
	                    title: "Tem certeza?",
	                    text: "Essa a√ß√£o n√£o pode ser desfeita!",
	                    icon: "warning",
	                    showCancelButton: true,
	                    confirmButtonColor: "#d33",
	                    cancelButtonColor: "#3085d6",
	                    confirmButtonText: "Sim, excluir!"
	                }).then((result) => {
	                    if (result.isConfirmed) {
	                        fetch(`/api/books/${bookId}`, {
	                            method: "DELETE"
	                        })
	                        .then(response => {
	                            if (!response.ok) {
	                                throw new Error("Erro ao excluir livro");
	                            }
	                            Swal.fire("Deletado!", "O livro foi removido com sucesso.", "success");
	                            loadBooks();
	                        })
	                        .catch(error => {
	                            Swal.fire("Erro!", "N√£o foi poss√≠vel excluir o livro.", "error");
	                        });
	                    }
	                });
	            }
	        });
	    </script>

	<style>
		body {
			font-family: 'Arial', sans-serif;
			margin: 20px;
			padding: 20px;
			background-color: #f8f9fa;
		}
		h1 {
			text-align: center;
			color: #343a40;
		}
		form {
			display: flex;
			flex-direction: column;
			max-width: 500px;
			margin: 20px auto;
			background: #fff;
			padding: 20px;
			border-radius: 8px;
			box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
		}
		label {
			margin-top: 10px;
			font-weight: bold;
			color: #495057;
		}
		input,
		textarea {
			padding: 10px;
			margin-top: 5px;
			border: 1px solid #ced4da;
			border-radius: 4px;
		}
		button {
			margin-top: 15px;
			background-color: #007bff;
			color: white;
			border: none;
			padding: 10px;
			cursor: pointer;
			border-radius: 4px;
			transition: 0.3s;
		}
		button:hover {
			background-color: #0056b3;
		}
		table {
			width: 100%;
			margin-top: 20px;
			border-collapse: collapse;
			background: #fff;
			box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
		}
		th,
		td {
			padding: 12px;
			border: 1px solid #ddd;
			text-align: left;
		}
		th {
			background-color: #007bff;
			color: white;
		}
		.edit-btn {
			background-color: #ffc107;
			color: black;
		}
		.edit-btn:hover {
			background-color: #e0a800;
		}
		.delete-btn {
			background-color: #dc3545;
			color: white;
		}
		.delete-btn:hover {
			background-color: #c82333;
		}
	</style>
{% endblock %}
